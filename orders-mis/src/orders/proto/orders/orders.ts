// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.12.4
// source: orders.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "orders";

export interface OrderItem {
  productId: string;
  quantity: number;
  salesPrice: number;
  subtotal: number;
}

export interface CreateOrderItemRequest {
  productId: string;
  quantity: number;
  salesPrice: number;
}

export interface UpdateOrderItemRequest {
  productId: string;
  newQuantity?: number | undefined;
  newSalesPrice?: number | undefined;
}

export interface Order {
  id: string;
  userId: string;
  items: OrderItem[];
  total: number;
}

export interface ListOrdersRequest {
  requestUserId: string;
  page: number;
  limit: number;
}

export interface ListOrdersResponse {
  orders: Order[];
  currentPage: number;
  pageItems: number;
  totalItems: number;
  hasPreviousPage: boolean;
  previousPage: number;
  hasNextPage: boolean;
  nextPage: number;
}

export interface GetOrderRequest {
  requestUserId: string;
  orderId: string;
}

export interface GetOrderResponse {
  order: Order | undefined;
}

export interface CreateOrderRequest {
  requestUserId: string;
  orderItems: CreateOrderItemRequest[];
}

export interface CreateOrderResponse {
  newOrder: Order | undefined;
}

export interface UpdateOrderRequest {
  requestUserId: string;
  orderId: string;
  itemsUpdates: UpdateOrderItemRequest[];
}

export interface UpdateOrderResponse {
  updatedOrder: Order | undefined;
}

export interface DeleteOrderRequest {
  requestUserId: string;
  orderId: string;
}

export interface DeleteOrderResponse {
  success: boolean;
}

function createBaseOrderItem(): OrderItem {
  return { productId: "", quantity: 0, salesPrice: 0, subtotal: 0 };
}

export const OrderItem = {
  encode(message: OrderItem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.quantity !== 0) {
      writer.uint32(17).double(message.quantity);
    }
    if (message.salesPrice !== 0) {
      writer.uint32(25).double(message.salesPrice);
    }
    if (message.subtotal !== 0) {
      writer.uint32(33).double(message.subtotal);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OrderItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.quantity = reader.double();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.salesPrice = reader.double();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.subtotal = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderItem {
    return {
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
      salesPrice: isSet(object.salesPrice) ? globalThis.Number(object.salesPrice) : 0,
      subtotal: isSet(object.subtotal) ? globalThis.Number(object.subtotal) : 0,
    };
  },

  toJSON(message: OrderItem): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.quantity !== 0) {
      obj.quantity = message.quantity;
    }
    if (message.salesPrice !== 0) {
      obj.salesPrice = message.salesPrice;
    }
    if (message.subtotal !== 0) {
      obj.subtotal = message.subtotal;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderItem>, I>>(base?: I): OrderItem {
    return OrderItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderItem>, I>>(object: I): OrderItem {
    const message = createBaseOrderItem();
    message.productId = object.productId ?? "";
    message.quantity = object.quantity ?? 0;
    message.salesPrice = object.salesPrice ?? 0;
    message.subtotal = object.subtotal ?? 0;
    return message;
  },
};

function createBaseCreateOrderItemRequest(): CreateOrderItemRequest {
  return { productId: "", quantity: 0, salesPrice: 0 };
}

export const CreateOrderItemRequest = {
  encode(message: CreateOrderItemRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.quantity !== 0) {
      writer.uint32(17).double(message.quantity);
    }
    if (message.salesPrice !== 0) {
      writer.uint32(25).double(message.salesPrice);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateOrderItemRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrderItemRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.quantity = reader.double();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.salesPrice = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOrderItemRequest {
    return {
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
      salesPrice: isSet(object.salesPrice) ? globalThis.Number(object.salesPrice) : 0,
    };
  },

  toJSON(message: CreateOrderItemRequest): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.quantity !== 0) {
      obj.quantity = message.quantity;
    }
    if (message.salesPrice !== 0) {
      obj.salesPrice = message.salesPrice;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateOrderItemRequest>, I>>(base?: I): CreateOrderItemRequest {
    return CreateOrderItemRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateOrderItemRequest>, I>>(object: I): CreateOrderItemRequest {
    const message = createBaseCreateOrderItemRequest();
    message.productId = object.productId ?? "";
    message.quantity = object.quantity ?? 0;
    message.salesPrice = object.salesPrice ?? 0;
    return message;
  },
};

function createBaseUpdateOrderItemRequest(): UpdateOrderItemRequest {
  return { productId: "", newQuantity: undefined, newSalesPrice: undefined };
}

export const UpdateOrderItemRequest = {
  encode(message: UpdateOrderItemRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.newQuantity !== undefined) {
      writer.uint32(17).double(message.newQuantity);
    }
    if (message.newSalesPrice !== undefined) {
      writer.uint32(25).double(message.newSalesPrice);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrderItemRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrderItemRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.newQuantity = reader.double();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.newSalesPrice = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrderItemRequest {
    return {
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      newQuantity: isSet(object.newQuantity) ? globalThis.Number(object.newQuantity) : undefined,
      newSalesPrice: isSet(object.newSalesPrice) ? globalThis.Number(object.newSalesPrice) : undefined,
    };
  },

  toJSON(message: UpdateOrderItemRequest): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.newQuantity !== undefined) {
      obj.newQuantity = message.newQuantity;
    }
    if (message.newSalesPrice !== undefined) {
      obj.newSalesPrice = message.newSalesPrice;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrderItemRequest>, I>>(base?: I): UpdateOrderItemRequest {
    return UpdateOrderItemRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrderItemRequest>, I>>(object: I): UpdateOrderItemRequest {
    const message = createBaseUpdateOrderItemRequest();
    message.productId = object.productId ?? "";
    message.newQuantity = object.newQuantity ?? undefined;
    message.newSalesPrice = object.newSalesPrice ?? undefined;
    return message;
  },
};

function createBaseOrder(): Order {
  return { id: "", userId: "", items: [], total: 0 };
}

export const Order = {
  encode(message: Order, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    for (const v of message.items) {
      OrderItem.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.total !== 0) {
      writer.uint32(33).double(message.total);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Order {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.items.push(OrderItem.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.total = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Order {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => OrderItem.fromJSON(e)) : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: Order): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => OrderItem.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = message.total;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Order>, I>>(base?: I): Order {
    return Order.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Order>, I>>(object: I): Order {
    const message = createBaseOrder();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.items = object.items?.map((e) => OrderItem.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    return message;
  },
};

function createBaseListOrdersRequest(): ListOrdersRequest {
  return { requestUserId: "", page: 0, limit: 0 };
}

export const ListOrdersRequest = {
  encode(message: ListOrdersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.requestUserId !== "") {
      writer.uint32(10).string(message.requestUserId);
    }
    if (message.page !== 0) {
      writer.uint32(16).int32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(24).int32(message.limit);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrdersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrdersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requestUserId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.limit = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrdersRequest {
    return {
      requestUserId: isSet(object.requestUserId) ? globalThis.String(object.requestUserId) : "",
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: ListOrdersRequest): unknown {
    const obj: any = {};
    if (message.requestUserId !== "") {
      obj.requestUserId = message.requestUserId;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOrdersRequest>, I>>(base?: I): ListOrdersRequest {
    return ListOrdersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOrdersRequest>, I>>(object: I): ListOrdersRequest {
    const message = createBaseListOrdersRequest();
    message.requestUserId = object.requestUserId ?? "";
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    return message;
  },
};

function createBaseListOrdersResponse(): ListOrdersResponse {
  return {
    orders: [],
    currentPage: 0,
    pageItems: 0,
    totalItems: 0,
    hasPreviousPage: false,
    previousPage: 0,
    hasNextPage: false,
    nextPage: 0,
  };
}

export const ListOrdersResponse = {
  encode(message: ListOrdersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.orders) {
      Order.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.currentPage !== 0) {
      writer.uint32(16).int32(message.currentPage);
    }
    if (message.pageItems !== 0) {
      writer.uint32(24).int32(message.pageItems);
    }
    if (message.totalItems !== 0) {
      writer.uint32(32).int32(message.totalItems);
    }
    if (message.hasPreviousPage !== false) {
      writer.uint32(40).bool(message.hasPreviousPage);
    }
    if (message.previousPage !== 0) {
      writer.uint32(48).int32(message.previousPage);
    }
    if (message.hasNextPage !== false) {
      writer.uint32(56).bool(message.hasNextPage);
    }
    if (message.nextPage !== 0) {
      writer.uint32(64).int32(message.nextPage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrdersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrdersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orders.push(Order.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.currentPage = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageItems = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.totalItems = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.hasPreviousPage = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.previousPage = reader.int32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.hasNextPage = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.nextPage = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrdersResponse {
    return {
      orders: globalThis.Array.isArray(object?.orders) ? object.orders.map((e: any) => Order.fromJSON(e)) : [],
      currentPage: isSet(object.currentPage) ? globalThis.Number(object.currentPage) : 0,
      pageItems: isSet(object.pageItems) ? globalThis.Number(object.pageItems) : 0,
      totalItems: isSet(object.totalItems) ? globalThis.Number(object.totalItems) : 0,
      hasPreviousPage: isSet(object.hasPreviousPage) ? globalThis.Boolean(object.hasPreviousPage) : false,
      previousPage: isSet(object.previousPage) ? globalThis.Number(object.previousPage) : 0,
      hasNextPage: isSet(object.hasNextPage) ? globalThis.Boolean(object.hasNextPage) : false,
      nextPage: isSet(object.nextPage) ? globalThis.Number(object.nextPage) : 0,
    };
  },

  toJSON(message: ListOrdersResponse): unknown {
    const obj: any = {};
    if (message.orders?.length) {
      obj.orders = message.orders.map((e) => Order.toJSON(e));
    }
    if (message.currentPage !== 0) {
      obj.currentPage = Math.round(message.currentPage);
    }
    if (message.pageItems !== 0) {
      obj.pageItems = Math.round(message.pageItems);
    }
    if (message.totalItems !== 0) {
      obj.totalItems = Math.round(message.totalItems);
    }
    if (message.hasPreviousPage !== false) {
      obj.hasPreviousPage = message.hasPreviousPage;
    }
    if (message.previousPage !== 0) {
      obj.previousPage = Math.round(message.previousPage);
    }
    if (message.hasNextPage !== false) {
      obj.hasNextPage = message.hasNextPage;
    }
    if (message.nextPage !== 0) {
      obj.nextPage = Math.round(message.nextPage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOrdersResponse>, I>>(base?: I): ListOrdersResponse {
    return ListOrdersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOrdersResponse>, I>>(object: I): ListOrdersResponse {
    const message = createBaseListOrdersResponse();
    message.orders = object.orders?.map((e) => Order.fromPartial(e)) || [];
    message.currentPage = object.currentPage ?? 0;
    message.pageItems = object.pageItems ?? 0;
    message.totalItems = object.totalItems ?? 0;
    message.hasPreviousPage = object.hasPreviousPage ?? false;
    message.previousPage = object.previousPage ?? 0;
    message.hasNextPage = object.hasNextPage ?? false;
    message.nextPage = object.nextPage ?? 0;
    return message;
  },
};

function createBaseGetOrderRequest(): GetOrderRequest {
  return { requestUserId: "", orderId: "" };
}

export const GetOrderRequest = {
  encode(message: GetOrderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.requestUserId !== "") {
      writer.uint32(10).string(message.requestUserId);
    }
    if (message.orderId !== "") {
      writer.uint32(18).string(message.orderId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requestUserId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.orderId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrderRequest {
    return {
      requestUserId: isSet(object.requestUserId) ? globalThis.String(object.requestUserId) : "",
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
    };
  },

  toJSON(message: GetOrderRequest): unknown {
    const obj: any = {};
    if (message.requestUserId !== "") {
      obj.requestUserId = message.requestUserId;
    }
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrderRequest>, I>>(base?: I): GetOrderRequest {
    return GetOrderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrderRequest>, I>>(object: I): GetOrderRequest {
    const message = createBaseGetOrderRequest();
    message.requestUserId = object.requestUserId ?? "";
    message.orderId = object.orderId ?? "";
    return message;
  },
};

function createBaseGetOrderResponse(): GetOrderResponse {
  return { order: undefined };
}

export const GetOrderResponse = {
  encode(message: GetOrderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.order !== undefined) {
      Order.encode(message.order, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.order = Order.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrderResponse {
    return { order: isSet(object.order) ? Order.fromJSON(object.order) : undefined };
  },

  toJSON(message: GetOrderResponse): unknown {
    const obj: any = {};
    if (message.order !== undefined) {
      obj.order = Order.toJSON(message.order);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrderResponse>, I>>(base?: I): GetOrderResponse {
    return GetOrderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrderResponse>, I>>(object: I): GetOrderResponse {
    const message = createBaseGetOrderResponse();
    message.order = (object.order !== undefined && object.order !== null) ? Order.fromPartial(object.order) : undefined;
    return message;
  },
};

function createBaseCreateOrderRequest(): CreateOrderRequest {
  return { requestUserId: "", orderItems: [] };
}

export const CreateOrderRequest = {
  encode(message: CreateOrderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.requestUserId !== "") {
      writer.uint32(10).string(message.requestUserId);
    }
    for (const v of message.orderItems) {
      CreateOrderItemRequest.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateOrderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requestUserId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.orderItems.push(CreateOrderItemRequest.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOrderRequest {
    return {
      requestUserId: isSet(object.requestUserId) ? globalThis.String(object.requestUserId) : "",
      orderItems: globalThis.Array.isArray(object?.orderItems)
        ? object.orderItems.map((e: any) => CreateOrderItemRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateOrderRequest): unknown {
    const obj: any = {};
    if (message.requestUserId !== "") {
      obj.requestUserId = message.requestUserId;
    }
    if (message.orderItems?.length) {
      obj.orderItems = message.orderItems.map((e) => CreateOrderItemRequest.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateOrderRequest>, I>>(base?: I): CreateOrderRequest {
    return CreateOrderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateOrderRequest>, I>>(object: I): CreateOrderRequest {
    const message = createBaseCreateOrderRequest();
    message.requestUserId = object.requestUserId ?? "";
    message.orderItems = object.orderItems?.map((e) => CreateOrderItemRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateOrderResponse(): CreateOrderResponse {
  return { newOrder: undefined };
}

export const CreateOrderResponse = {
  encode(message: CreateOrderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.newOrder !== undefined) {
      Order.encode(message.newOrder, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateOrderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.newOrder = Order.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOrderResponse {
    return { newOrder: isSet(object.newOrder) ? Order.fromJSON(object.newOrder) : undefined };
  },

  toJSON(message: CreateOrderResponse): unknown {
    const obj: any = {};
    if (message.newOrder !== undefined) {
      obj.newOrder = Order.toJSON(message.newOrder);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateOrderResponse>, I>>(base?: I): CreateOrderResponse {
    return CreateOrderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateOrderResponse>, I>>(object: I): CreateOrderResponse {
    const message = createBaseCreateOrderResponse();
    message.newOrder = (object.newOrder !== undefined && object.newOrder !== null)
      ? Order.fromPartial(object.newOrder)
      : undefined;
    return message;
  },
};

function createBaseUpdateOrderRequest(): UpdateOrderRequest {
  return { requestUserId: "", orderId: "", itemsUpdates: [] };
}

export const UpdateOrderRequest = {
  encode(message: UpdateOrderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.requestUserId !== "") {
      writer.uint32(10).string(message.requestUserId);
    }
    if (message.orderId !== "") {
      writer.uint32(18).string(message.orderId);
    }
    for (const v of message.itemsUpdates) {
      UpdateOrderItemRequest.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requestUserId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.orderId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.itemsUpdates.push(UpdateOrderItemRequest.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrderRequest {
    return {
      requestUserId: isSet(object.requestUserId) ? globalThis.String(object.requestUserId) : "",
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
      itemsUpdates: globalThis.Array.isArray(object?.itemsUpdates)
        ? object.itemsUpdates.map((e: any) => UpdateOrderItemRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateOrderRequest): unknown {
    const obj: any = {};
    if (message.requestUserId !== "") {
      obj.requestUserId = message.requestUserId;
    }
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    if (message.itemsUpdates?.length) {
      obj.itemsUpdates = message.itemsUpdates.map((e) => UpdateOrderItemRequest.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrderRequest>, I>>(base?: I): UpdateOrderRequest {
    return UpdateOrderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrderRequest>, I>>(object: I): UpdateOrderRequest {
    const message = createBaseUpdateOrderRequest();
    message.requestUserId = object.requestUserId ?? "";
    message.orderId = object.orderId ?? "";
    message.itemsUpdates = object.itemsUpdates?.map((e) => UpdateOrderItemRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateOrderResponse(): UpdateOrderResponse {
  return { updatedOrder: undefined };
}

export const UpdateOrderResponse = {
  encode(message: UpdateOrderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.updatedOrder !== undefined) {
      Order.encode(message.updatedOrder, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.updatedOrder = Order.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateOrderResponse {
    return { updatedOrder: isSet(object.updatedOrder) ? Order.fromJSON(object.updatedOrder) : undefined };
  },

  toJSON(message: UpdateOrderResponse): unknown {
    const obj: any = {};
    if (message.updatedOrder !== undefined) {
      obj.updatedOrder = Order.toJSON(message.updatedOrder);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateOrderResponse>, I>>(base?: I): UpdateOrderResponse {
    return UpdateOrderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateOrderResponse>, I>>(object: I): UpdateOrderResponse {
    const message = createBaseUpdateOrderResponse();
    message.updatedOrder = (object.updatedOrder !== undefined && object.updatedOrder !== null)
      ? Order.fromPartial(object.updatedOrder)
      : undefined;
    return message;
  },
};

function createBaseDeleteOrderRequest(): DeleteOrderRequest {
  return { requestUserId: "", orderId: "" };
}

export const DeleteOrderRequest = {
  encode(message: DeleteOrderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.requestUserId !== "") {
      writer.uint32(10).string(message.requestUserId);
    }
    if (message.orderId !== "") {
      writer.uint32(18).string(message.orderId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteOrderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requestUserId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.orderId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteOrderRequest {
    return {
      requestUserId: isSet(object.requestUserId) ? globalThis.String(object.requestUserId) : "",
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
    };
  },

  toJSON(message: DeleteOrderRequest): unknown {
    const obj: any = {};
    if (message.requestUserId !== "") {
      obj.requestUserId = message.requestUserId;
    }
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteOrderRequest>, I>>(base?: I): DeleteOrderRequest {
    return DeleteOrderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteOrderRequest>, I>>(object: I): DeleteOrderRequest {
    const message = createBaseDeleteOrderRequest();
    message.requestUserId = object.requestUserId ?? "";
    message.orderId = object.orderId ?? "";
    return message;
  },
};

function createBaseDeleteOrderResponse(): DeleteOrderResponse {
  return { success: false };
}

export const DeleteOrderResponse = {
  encode(message: DeleteOrderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteOrderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteOrderResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteOrderResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteOrderResponse>, I>>(base?: I): DeleteOrderResponse {
    return DeleteOrderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteOrderResponse>, I>>(object: I): DeleteOrderResponse {
    const message = createBaseDeleteOrderResponse();
    message.success = object.success ?? false;
    return message;
  },
};

export interface OrderService {
  ListOrders(request: ListOrdersRequest): Promise<ListOrdersResponse>;
  GetOrder(request: GetOrderRequest): Promise<GetOrderResponse>;
  CreateOrder(request: CreateOrderRequest): Promise<CreateOrderResponse>;
  UpdateOrder(request: UpdateOrderRequest): Promise<UpdateOrderResponse>;
  DeleteOrder(request: DeleteOrderRequest): Promise<DeleteOrderResponse>;
}

export const OrderServiceServiceName = "orders.OrderService";
export class OrderServiceClientImpl implements OrderService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || OrderServiceServiceName;
    this.rpc = rpc;
    this.ListOrders = this.ListOrders.bind(this);
    this.GetOrder = this.GetOrder.bind(this);
    this.CreateOrder = this.CreateOrder.bind(this);
    this.UpdateOrder = this.UpdateOrder.bind(this);
    this.DeleteOrder = this.DeleteOrder.bind(this);
  }
  ListOrders(request: ListOrdersRequest): Promise<ListOrdersResponse> {
    const data = ListOrdersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListOrders", data);
    return promise.then((data) => ListOrdersResponse.decode(_m0.Reader.create(data)));
  }

  GetOrder(request: GetOrderRequest): Promise<GetOrderResponse> {
    const data = GetOrderRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetOrder", data);
    return promise.then((data) => GetOrderResponse.decode(_m0.Reader.create(data)));
  }

  CreateOrder(request: CreateOrderRequest): Promise<CreateOrderResponse> {
    const data = CreateOrderRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateOrder", data);
    return promise.then((data) => CreateOrderResponse.decode(_m0.Reader.create(data)));
  }

  UpdateOrder(request: UpdateOrderRequest): Promise<UpdateOrderResponse> {
    const data = UpdateOrderRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateOrder", data);
    return promise.then((data) => UpdateOrderResponse.decode(_m0.Reader.create(data)));
  }

  DeleteOrder(request: DeleteOrderRequest): Promise<DeleteOrderResponse> {
    const data = DeleteOrderRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteOrder", data);
    return promise.then((data) => DeleteOrderResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
